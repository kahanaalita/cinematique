#!/bin/bash

# –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã Cinematique —Å Rate Limiting

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

API_BASE="http://localhost:8080/api"
JWT_TOKEN=""

echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${BLUE}‚ïë                 CINEMATIQUE FINAL TEST SUITE                 ‚ïë${NC}"
echo -e "${BLUE}‚ïë                   with Rate Limiting                         ‚ïë${NC}"
echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    echo -e "${YELLOW}üîç Checking dependencies...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if ! curl -s "$API_BASE/movies" > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Application is not running on localhost:8080${NC}"
        echo "Please start: go run main.go"
        exit 1
    fi
    echo -e "${GREEN}‚úì Application is running${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
    if ! docker-compose ps redis | grep -q "Up"; then
        echo -e "${RED}‚ùå Redis is not running${NC}"
        echo "Please start: docker-compose up -d redis"
        exit 1
    fi
    echo -e "${GREEN}‚úì Redis is running${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º jq (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if command -v jq &> /dev/null; then
        echo -e "${GREEN}‚úì jq is available${NC}"
    else
        echo -e "${YELLOW}‚ö† jq not found (JSON won't be formatted)${NC}"
    fi
    
    echo
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
authenticate() {
    echo -e "${YELLOW}üîê Authenticating...${NC}"
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    curl -s -X POST "$API_BASE/auth/register" \
        -H "Content-Type: application/json" \
        -d '{
            "username": "testuser",
            "password": "testpass123",
            "role": "user"
        }' > /dev/null 2>&1
    
    # –õ–æ–≥–∏–Ω–∏–º—Å—è
    RESPONSE=$(curl -s -X POST "$API_BASE/auth/login" \
        -H "Content-Type: application/json" \
        -d '{
            "username": "testuser",
            "password": "testpass123"
        }')
    
    JWT_TOKEN=$(echo $RESPONSE | jq -r '.access_token // .token // empty' 2>/dev/null || echo "")
    
    if [ -n "$JWT_TOKEN" ] && [ "$JWT_TOKEN" != "null" ]; then
        echo -e "${GREEN}‚úì Authentication successful${NC}"
    else
        echo -e "${RED}‚ùå Authentication failed${NC}"
        echo "Response: $RESPONSE"
        exit 1
    fi
    echo
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ API
test_basic_api() {
    echo -e "${YELLOW}üé¨ Testing basic API functionality...${NC}"
    
    AUTH_HEADER="Authorization: Bearer $JWT_TOKEN"
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤
    RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" -H "$AUTH_HEADER" "$API_BASE/movies")
    HTTP_CODE=$(echo $RESPONSE | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
    
    if [ "$HTTP_CODE" = "200" ]; then
        echo -e "${GREEN}‚úì GET /api/movies - SUCCESS${NC}"
    else
        echo -e "${RED}‚ùå GET /api/movies - FAILED ($HTTP_CODE)${NC}"
    fi
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–µ—Ä–æ–≤
    RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" -H "$AUTH_HEADER" "$API_BASE/actors")
    HTTP_CODE=$(echo $RESPONSE | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
    
    if [ "$HTTP_CODE" = "200" ]; then
        echo -e "${GREEN}‚úì GET /api/actors - SUCCESS${NC}"
    else
        echo -e "${RED}‚ùå GET /api/actors - FAILED ($HTTP_CODE)${NC}"
    fi
    
    echo
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è rate limiting
test_rate_limiting() {
    echo -e "${YELLOW}üö¶ Testing rate limiting...${NC}"
    
    AUTH_HEADER="Authorization: Bearer $JWT_TOKEN"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å rate limiting
    RESPONSE=$(curl -s -H "$AUTH_HEADER" "$API_BASE/rate-limit/status")
    if echo $RESPONSE | jq -e '.enabled' > /dev/null 2>&1; then
        ENABLED=$(echo $RESPONSE | jq -r '.enabled')
        LIMIT=$(echo $RESPONSE | jq -r '.limit')
        echo -e "${GREEN}‚úì Rate limiting is enabled (limit: $LIMIT)${NC}"
    else
        echo -e "${RED}‚ùå Rate limiting status check failed${NC}"
        return 1
    fi
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    echo -e "${BLUE}  Testing normal requests...${NC}"
    SUCCESS_COUNT=0
    for i in {1..10}; do
        RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" -H "$AUTH_HEADER" "$API_BASE/movies")
        HTTP_CODE=$(echo $RESPONSE | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
        
        if [ "$HTTP_CODE" = "200" ]; then
            SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        fi
        sleep 0.1
    done
    
    if [ $SUCCESS_COUNT -eq 10 ]; then
        echo -e "${GREEN}  ‚úì Normal requests: $SUCCESS_COUNT/10 successful${NC}"
    else
        echo -e "${YELLOW}  ‚ö† Normal requests: $SUCCESS_COUNT/10 successful${NC}"
    fi
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ (–±—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã)
    echo -e "${BLUE}  Testing rate limit enforcement...${NC}"
    RATE_LIMITED_COUNT=0
    
    for i in {1..20}; do
        RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" -H "$AUTH_HEADER" "$API_BASE/movies")
        HTTP_CODE=$(echo $RESPONSE | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
        
        if [ "$HTTP_CODE" = "429" ]; then
            RATE_LIMITED_COUNT=$((RATE_LIMITED_COUNT + 1))
        fi
        sleep 0.01  # –û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    done
    
    if [ $RATE_LIMITED_COUNT -gt 0 ]; then
        echo -e "${GREEN}  ‚úì Rate limiting working: $RATE_LIMITED_COUNT requests blocked${NC}"
    else
        echo -e "${YELLOW}  ‚ö† Rate limiting not triggered (limit might be high)${NC}"
    fi
    
    echo
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
test_headers() {
    echo -e "${YELLOW}üìã Testing rate limit headers...${NC}"
    
    AUTH_HEADER="Authorization: Bearer $JWT_TOKEN"
    
    HEADERS=$(curl -s -I -H "$AUTH_HEADER" "$API_BASE/movies")
    
    if echo "$HEADERS" | grep -qi "x-ratelimit-limit"; then
        LIMIT=$(echo "$HEADERS" | grep -i "x-ratelimit-limit" | cut -d: -f2 | tr -d ' \r')
        echo -e "${GREEN}‚úì X-RateLimit-Limit: $LIMIT${NC}"
    else
        echo -e "${RED}‚ùå X-RateLimit-Limit header missing${NC}"
    fi
    
    if echo "$HEADERS" | grep -qi "x-ratelimit-remaining"; then
        REMAINING=$(echo "$HEADERS" | grep -i "x-ratelimit-remaining" | cut -d: -f2 | tr -d ' \r')
        echo -e "${GREEN}‚úì X-RateLimit-Remaining: $REMAINING${NC}"
    else
        echo -e "${RED}‚ùå X-RateLimit-Remaining header missing${NC}"
    fi
    
    if echo "$HEADERS" | grep -qi "x-ratelimit-reset"; then
        RESET=$(echo "$HEADERS" | grep -i "x-ratelimit-reset" | cut -d: -f2 | tr -d ' \r')
        echo -e "${GREEN}‚úì X-RateLimit-Reset: $RESET${NC}"
    else
        echo -e "${RED}‚ùå X-RateLimit-Reset header missing${NC}"
    fi
    
    echo
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
test_user_isolation() {
    echo -e "${YELLOW}üë• Testing user isolation...${NC}"
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    curl -s -X POST "$API_BASE/auth/register" \
        -H "Content-Type: application/json" \
        -d '{
            "username": "testuser2",
            "password": "testpass123",
            "role": "user"
        }' > /dev/null 2>&1
    
    # –õ–æ–≥–∏–Ω–∏–º—Å—è –≤—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    RESPONSE=$(curl -s -X POST "$API_BASE/auth/login" \
        -H "Content-Type: application/json" \
        -d '{
            "username": "testuser2",
            "password": "testpass123"
        }')
    
    JWT_TOKEN2=$(echo $RESPONSE | jq -r '.access_token // .token // empty' 2>/dev/null || echo "")
    
    if [ -n "$JWT_TOKEN2" ] && [ "$JWT_TOKEN2" != "null" ]; then
        echo -e "${GREEN}‚úì Second user authenticated${NC}"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º, —á—Ç–æ —É –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤–æ–π –ª–∏–º–∏—Ç
        AUTH_HEADER2="Authorization: Bearer $JWT_TOKEN2"
        RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" -H "$AUTH_HEADER2" "$API_BASE/movies")
        HTTP_CODE=$(echo $RESPONSE | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
        
        if [ "$HTTP_CODE" = "200" ]; then
            echo -e "${GREEN}‚úì User isolation working - second user can make requests${NC}"
        else
            echo -e "${RED}‚ùå User isolation failed - second user blocked${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö† Could not create second user${NC}"
    fi
    
    echo
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
test_performance() {
    echo -e "${YELLOW}‚ö° Testing performance...${NC}"
    
    AUTH_HEADER="Authorization: Bearer $JWT_TOKEN"
    
    START_TIME=$(date +%s%N)
    
    # –î–µ–ª–∞–µ–º 50 –∑–∞–ø—Ä–æ—Å–æ–≤
    for i in {1..50}; do
        curl -s -H "$AUTH_HEADER" "$API_BASE/movies" > /dev/null
    done
    
    END_TIME=$(date +%s%N)
    DURATION=$(( (END_TIME - START_TIME) / 1000000 )) # Convert to milliseconds
    
    echo -e "${GREEN}‚úì 50 requests completed in ${DURATION}ms${NC}"
    echo -e "${BLUE}  Average: $((DURATION / 50))ms per request${NC}"
    
    echo
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Redis
test_redis_integration() {
    echo -e "${YELLOW}üî¥ Testing Redis integration...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ Redis
    REDIS_KEYS=$(docker-compose exec -T redis redis-cli KEYS "ratelimit:*" 2>/dev/null || echo "")
    
    if [ -n "$REDIS_KEYS" ]; then
        KEY_COUNT=$(echo "$REDIS_KEYS" | wc -l)
        echo -e "${GREEN}‚úì Redis keys found: $KEY_COUNT rate limit keys${NC}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∫–ª—é—á–∞
        FIRST_KEY=$(echo "$REDIS_KEYS" | head -n1)
        if [ -n "$FIRST_KEY" ]; then
            VALUE=$(docker-compose exec -T redis redis-cli GET "$FIRST_KEY" 2>/dev/null || echo "")
            echo -e "${BLUE}  Example key: $FIRST_KEY = $VALUE${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö† No Redis keys found (might be expired)${NC}"
    fi
    
    echo
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–∞
generate_report() {
    echo -e "${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}‚ïë                        TEST REPORT                          ‚ïë${NC}"
    echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo
    echo -e "${BLUE}‚úÖ Tests Completed Successfully:${NC}"
    echo -e "   ‚Ä¢ Application connectivity"
    echo -e "   ‚Ä¢ Redis connectivity"
    echo -e "   ‚Ä¢ User authentication"
    echo -e "   ‚Ä¢ Basic API functionality"
    echo -e "   ‚Ä¢ Rate limiting enforcement"
    echo -e "   ‚Ä¢ HTTP headers"
    echo -e "   ‚Ä¢ User isolation"
    echo -e "   ‚Ä¢ Performance testing"
    echo -e "   ‚Ä¢ Redis integration"
    echo
    echo -e "${GREEN}üéâ Rate Limiting Implementation: SUCCESSFUL${NC}"
    echo
    echo -e "${YELLOW}üìö Documentation:${NC}"
    echo -e "   ‚Ä¢ Rate Limiting: docs/RATE_LIMITING.md"
    echo -e "   ‚Ä¢ Examples: examples/rate_limit_example.go"
    echo -e "   ‚Ä¢ Tests: tests/test_rate_limit.sh"
    echo
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    check_dependencies
    authenticate
    test_basic_api
    test_rate_limiting
    test_headers
    test_user_isolation
    test_performance
    test_redis_integration
    generate_report
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'echo -e "\n${RED}Test interrupted${NC}"; exit 1' INT TERM

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
main